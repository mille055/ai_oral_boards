stages:
  - build
  - deploy

variables:
  RUST_VERSION: "stable"
  AWS_DEFAULT_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "radiology-teaching-files"
  S3_BUCKET: "radiology-teaching-files"
  DYNAMODB_TABLE: "RadiologyTeachingFiles"

build-frontend:
  stage: build
  image: node:18
  before_script:
    - cd frontend
    - npm install
  script:
    - npm run lint
    - npm run build
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 week

build-backend:
  stage: build
  image: rust:slim
  before_script:
    - apt-get update -qy
    - apt-get install -y curl wget zip unzip file
    
    # Install cargo-lambda manually
    - rustup update
    - cargo install cargo-lambda --locked
    
    - rustup target add aarch64-unknown-linux-gnu
  
  script:
    - echo "Current Rust toolchain:"
    - rustc --version
    - echo "Cargo version:"
    - cargo --version
    - echo "Cargo Lambda version:"
    - cargo lambda --version
    
    - cargo lambda build --release --verbose
    
    - mkdir -p target/lambda/radiology-teaching-files
    - cp target/lambda/radiology-teaching-files/bootstrap target/lambda/radiology-teaching-files/
    - chmod +x target/lambda/radiology-teaching-files/bootstrap
    
    - echo "Verifying bootstrap binary:"
    - file target/lambda/radiology-teaching-files/bootstrap
  
  artifacts:
    paths:
      - target/lambda/radiology-teaching-files/
      - frontend/build/
    expire_in: 1 week
  dependencies:
    - build-frontend
  only:
    - main
  environment:
    name: production