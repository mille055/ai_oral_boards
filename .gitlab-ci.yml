stages:
  - build
  - deploy

variables:
  RUST_VERSION: "stable"
  AWS_DEFAULT_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "radiology-teaching-files"
  S3_BUCKET: "radiology-teaching-files"
  DYNAMODB_TABLE: "RadiologyTeachingFiles"

build-frontend:
  stage: build
  image: node:18
  before_script:
    - cd frontend
    - npm install
  script:
    - npm run lint
    - npm run build
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 week

build-backend:
  stage: build
  image: rust:slim
  before_script:
    - apt-get update -qy
    - apt-get install -y curl zip unzip file
    - curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-lambda/cargo-lambda/main/install.sh | sh
    - rustup update
    - rustup target add aarch64-unknown-linux-gnu
  script:
    - cargo lambda build --release
    - mkdir -p target/lambda/radiology-teaching-files
    - cp target/lambda/radiology-teaching-files/bootstrap target/lambda/radiology-teaching-files/
    - chmod +x target/lambda/radiology-teaching-files/bootstrap
  artifacts:
    paths:
      - target/lambda/radiology-teaching-files/
      - frontend/build/
    expire_in: 1 week
  dependencies:
    - build-frontend

deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  before_script:
    - yum update -y
    - yum install -y zip unzip
  script:
    - |
      if ! aws s3api head-bucket --bucket $S3_BUCKET 2>/dev/null; then
        aws s3 mb s3://$S3_BUCKET
      fi
    - aws s3 sync frontend/build s3://$S3_BUCKET --delete
    - mkdir -p deployment/frontend
    - cp target/lambda/radiology-teaching-files/bootstrap deployment/
    - cp -r frontend/build/* deployment/frontend/
    - cd deployment
    - zip -r ../function.zip .
    - cd ..
    - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://function.zip
  dependencies:
    - build-backend
  only:
    - main
  environment:
    name: production