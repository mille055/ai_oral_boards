stages:
  - build-test
  - deploy

variables:
  RUST_VERSION: "stable"
  AWS_DEFAULT_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "radiology-teaching-files"
  S3_BUCKET: "radiology-teaching-files"
  DYNAMODB_TABLE: "RadiologyTeachingFiles"

build-test:
  image: rust:slim
  before_script:
    - apt-get update -qy
    - apt-get install -y curl jq wget zip unzip pkg-config libssl-dev build-essential
  stage: build-test
  script:
    # Check Rust version
    - rustc --version
    - cargo --version
    
    # Run tests
    - cargo test
    - cargo clippy -- -D warnings || true
    
    # Build Lambda
    - cargo build --release
    
    # Create the Lambda bootstrap file manually
    - mkdir -p target/lambda/radiology-teaching-files
    - ls -la target/release
    - cp target/release/radiology-teaching-files target/lambda/radiology-teaching-files/bootstrap || cp target/release/radiology_teaching_files target/lambda/radiology-teaching-files/bootstrap || echo "Could not find executable with expected name"
    - chmod +x target/lambda/radiology-teaching-files/bootstrap || echo "Could not set executable permissions"
    
    # Fallback: if the specific file copy fails, try to find any executable
    - if [ ! -f target/lambda/radiology-teaching-files/bootstrap ]; then
        echo "Trying alternate method to find executable";
        find target/release -type f -perm /111 -not -name "*.d" | head -1 | xargs -I{} cp {} target/lambda/radiology-teaching-files/bootstrap;
        chmod +x target/lambda/radiology-teaching-files/bootstrap || true;
      fi
    
    # Verify the bootstrap file exists
    - ls -la target/lambda/radiology-teaching-files/bootstrap || (echo "Bootstrap file not found, build failed" && exit 1)
  artifacts:
    paths:
      - target/lambda/radiology-teaching-files/
      - target/release/
    expire_in: 1 week

deploy:
  stage: deploy
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  before_script:
    - yum update -y
    - yum install -y zip unzip findutils
  script:
    # Verify bootstrap file exists
    - ls -la target/lambda/radiology-teaching-files/ || echo "Bootstrap directory not found"
    - ls -la target/lambda/radiology-teaching-files/bootstrap || echo "Bootstrap file not found"
    
    # Create zip package
    - mkdir -p deployment
    - cp target/lambda/radiology-teaching-files/bootstrap deployment/ || echo "Failed to copy bootstrap file"
    - ls -la deployment/ || echo "Deployment directory not found"
    - cd deployment && zip -j function.zip bootstrap && cd ..
    - ls -la deployment/function.zip || echo "Function zip not created"
    
    # Check if Lambda function already exists
    - |
      if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME >/dev/null 2>&1; then
        echo "Updating existing Lambda function..."
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --zip-file fileb://deployment/function.zip
      else
        echo "Creating new Lambda function..."
        # Create execution role if it doesn't exist
        ROLE_ARN=$(aws iam get-role --role-name lambda-radiology-role 2>/dev/null | jq -r '.Role.Arn' || echo "")
        if [ -z "$ROLE_ARN" ]; then
          echo "Creating IAM role..."
          aws iam create-role \
            --role-name lambda-radiology-role \
            --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
          
          aws iam attach-role-policy \
            --role-name lambda-radiology-role \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          aws iam attach-role-policy \
            --role-name lambda-radiology-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          
          aws iam attach-role-policy \
            --role-name lambda-radiology-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
          
          # Wait for role to propagate
          sleep 10
          ROLE_ARN=$(aws iam get-role --role-name lambda-radiology-role | jq -r '.Role.Arn')
        fi
        
        # Create Lambda function
        aws lambda create-function \
          --function-name $LAMBDA_FUNCTION_NAME \
          --runtime provided.al2 \
          --role $ROLE_ARN \
          --handler bootstrap \
          --zip-file fileb://deployment/function.zip \
          --environment "Variables={RUST_LOG=info,BUCKET_NAME=$S3_BUCKET,DYNAMODB_TABLE=$DYNAMODB_TABLE}" \
          --memory-size 256 \
          --timeout 30
      fi
    
    # Deploy API Gateway or other AWS resources as needed
    - echo "Deployed Lambda function successfully"
  dependencies:
    - build-test
  only:
    - main  # Only deploy when pushing to main branch
  environment:
    name: production