stages:
  - build
  - deploy

variables:
  RUST_VERSION: "stable"
  AWS_DEFAULT_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "radiology-teaching-files"
  S3_BUCKET: "radiology-teaching-files"
  DYNAMODB_TABLE: "RadiologyTeachingFiles"
  AWS_LAMBDA_ROLE: "arn:aws:iam::083702193891:role/lambda-radiology-role"  # Replace with your actual role ARN

# -------------------------------------
# ðŸ“Œ Frontend Build Stage (Node.js)
# -------------------------------------
build-frontend:
  stage: build
  image: node:18
  before_script:
    - cd frontend
    - npm install
  script:
    - npm run lint
    - npm run build
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 week

# -------------------------------------
# ðŸ“Œ Backend Build Stage (Rust + Lambda)
# -------------------------------------
build-backend:
  stage: build
  image: ghcr.io/cargo-lambda/cargo-lambda:latest  # âœ… Pre-built Lambda Rust image
  script:
    - cargo lambda build --release --arm64  # âœ… Automatically handles targets

  artifacts:
    paths:
      - target/lambda/
    expire_in: 1 week
# -------------------------------------
# ðŸ“Œ Deployment to AWS Lambda & S3
# -------------------------------------
deploy:
  stage: deploy
  # image: ghcr.io/cargo-lambda/cargo-lambda:latest  # âœ… Use the correct Rust image
  # script:
  #   - cargo lambda deploy --iam-role $AWS_LAMBDA_ROLE --region $AWS_DEFAULT_REGION $LAMBDA_FUNCTION_NAME
  # dependencies:
  image: amazon/aws-cli  # âœ… Use AWS CLI image for S3 upload
  script:
    - aws --version  # âœ… Check AWS CLI version
    - ls -R frontend/build/  # âœ… Ensure build files exist
    - aws s3 sync frontend/build/ s3://$S3_BUCKET/frontend/ 

    # âœ… Deploy the backend Lambda function
    - cargo lambda deploy --iam-role $AWS_LAMBDA_ROLE --region $AWS_DEFAULT_REGION $LAMBDA_FUNCTION_NAME
  dependencies:
    - build-frontend
    - build-backend
  only:
    - main
  environment:
    name: production